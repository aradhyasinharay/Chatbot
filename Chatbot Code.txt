from flask import Flask, request, jsonify
from typing import Dict

app = Flask(__name__)

# Mock user database with roles
USER_DB = {
    "user1": "vendor",
    "user2": "contractor",
    "user3": "employee"
}

# Questions by role and topic
TOPIC_QUESTIONS = {
    "Power Theft": {
        "vendor": [
            "How to report suspected power theft at a client site?",
            "What are the penalties for customers involved in power theft?"
        ],
        "contractor": [
            "What is the SOP if I find illegal tapping during work?",
            "How do I escalate a power theft issue I witnessed?"
        ],
        "employee": [
            "How to initiate a power theft inspection?",
            "What forms are needed for documenting power theft?"
        ]
    },
    "Generating Plant": {
        "vendor": [
            "What are the requirements to supply equipment to a generating plant?",
            "How to get approval for plant maintenance tenders?"
        ],
        "contractor": [
            "What is the procedure to work on plant site installations?",
            "Are safety certifications required before site entry?"
        ],
        "employee": [
            "How to schedule maintenance at a generating plant?",
            "How to report plant capacity issues?"
        ]
    },
    "Demand": {
        "vendor": [
            "How to provide proposals for demand response solutions?",
            "Are there demand forecasts available for vendors?"
        ],
        "contractor": [
            "How to adjust project timelines based on demand fluctuations?",
            "Who approves changes to demand-related work orders?"
        ],
        "employee": [
            "How to access real-time demand data?",
            "What tools are available to forecast demand changes?"
        ]
    }
}

@app.route('/chatbot', methods=['POST'])
def chatbot():
    data = request.get_json()
    username = data.get("username")
    topic = data.get("topic")

    role = USER_DB.get(username)
    if not role:
        return jsonify({"error": "Invalid user."}), 400

    if topic not in TOPIC_QUESTIONS:
        return jsonify({"error": "Invalid topic."}), 400

    questions = TOPIC_QUESTIONS[topic].get(role, [])
    return jsonify({
        "role": role,
        "topic": topic,
        "suggested_questions": questions
    })

if __name__ == '__main__':
    app.run(debug=True)
